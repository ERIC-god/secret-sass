
// import type { Metadata } from "next";
// import { getServerSession } from "@/server/auth";
// import { redirect } from "next/navigation";
// import { Button } from "@/components/ui/button";
// import { Avatar, AvatarImage, AvatarFallback } from "@/components/ui/avatar";
// import { Plan } from "./Plan";

// export const metadata: Metadata = {
//   title: "Dashboard",
//   description: "Generated by create next app",
// };

// export default async function DashborardLayout({
//   children,
//   nav,
// }: {
//   children: React.ReactNode;
//   nav: React.ReactNode;
// }) {
//   const session = await getServerSession();



//   return (
//     <div>
//       <nav>
//         <Button variant="ghost">
//           <Avatar>
//             <AvatarImage src={session.user.image!}></AvatarImage>
//             <AvatarFallback style={{ color: "black" }}>
//               {session.user.name?.substring(0, 2)}
//             </AvatarFallback>
//           </Avatar>
//         </Button>
//         <Plan></Plan>

//         <div className=" absolute top-0 h-full left-1/2 -translate-x-1/2 flex justify-center items-center">
//           {nav}
//         </div>
//       </nav>
//       <main>{children}</main>
//     </div>
//   );
// }


// components/DashboardLayout.tsx
import { ReactNode } from "react";
import { Home, CreditCard, User } from "lucide-react";
import clsx from "clsx";
import { getServerSession } from "@/server/auth";
import { Plan } from "./Plan";
import { UserAvatar } from "./UserAvatar";
import { redirect } from "next/navigation";

const navItems = [
  { label: "Apps", icon: Home, href: "/dashboard/apps" },
  { label: "Billing", icon: CreditCard, href: "/dashboard/billing" },
  { label: "Account", icon: User, href: "/dashboard/account" },
];

type DashboardLayoutProps = {
  children: ReactNode;
  user: {
    name: string;
    avatarUrl?: string;
    plan: "free" | "pro";
  };
};

export default async function DashboardLayout({
  children,
  user,
}: DashboardLayoutProps) {
  const session = await getServerSession();

  if (!session?.user) {
    redirect("/api/auth/signin");
  }

  return (
    <div className="min-h-screen flex bg-gradient-to-br from-[#1a1a2e] via-[#16213e] to-[#0f3460]">
      {/* 侧边栏 */}
      <aside className="w-64 bg-white/80 backdrop-blur-md border-r border-gray-200 flex flex-col py-8 px-4">
        <div className="flex items-center mb-10">
          <span className="text-2xl font-extrabold tracking-tight bg-clip-text text-transparent bg-gradient-to-r from-yellow-400 via-pink-400 to-blue-400">
            FileFlow
          </span>
        </div>
        <nav className="flex-1 space-y-2">
          {navItems.map((item) => (
            <a
              key={item.label}
              href={item.href}
              className={clsx(
                "flex items-center gap-3 px-3 py-2 rounded-lg text-gray-800 hover:bg-gradient-to-r hover:from-blue-100 hover:to-pink-100 transition font-medium"
                // 可根据当前路由高亮
              )}
            >
              <item.icon className="w-5 h-5 text-blue-500" />
              {item.label}
            </a>
          ))}
        </nav>
      </aside>

      {/* 主内容区 */}
      <div className="flex-1 flex flex-col">
        {/* 顶部栏 */}
        <header className="flex items-center justify-end px-8 py-4 border-b border-white/20 bg-white/10">
          {/* 付费状态标签 */}
          <Plan></Plan>
          {/* 头像 */}
          <UserAvatar
            src={session?.user.image!}
            alt={session?.user.name!}
            fallbackText={session?.user.name!}
          />
        </header>
        {/* 主内容插槽 */}
        <main className="flex-1  min-h-screen overflow-auto">{children}</main>
      </div>
    </div>
  );
}